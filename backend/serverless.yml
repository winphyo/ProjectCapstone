---
  service:
    name: serverless-product-app
  plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  provider:
    name: aws
    runtime: nodejs12.x
    stage: "${opt:stage, 'dev'}"
    region: "${opt:region, 'us-east-1'}"
    environment:
      product_TABLE: product-${self:provider.stage}
      INDEX_NAME: byUserIdIndex
      productITEM_S3_BUCKET_NAME: product-attachments-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 300
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      - dynamodb:PutItem
      - dynamodb:GetItem
      - dynamodb:UpdateItem
      - dynamodb:Query
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.product_TABLE}
    - Effect: Allow
      Action:
      - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.product_TABLE}/index/${self:provider.environment.INDEX_NAME}
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.productITEM_S3_BUCKET_NAME}/*
  functions:
    Auth:
      handler: src/lambda/auth/auth0Authorizer.handler
    Getproducts:
      handler: src/lambda/http/getproducts.handler
      events:
      - http:
          method: get
          path: products
          authorizer: Auth
          cors: true
    Createproduct:
      handler: src/lambda/http/createproduct.handler
      events:
      - http:
          method: post
          path: products
          authorizer: Auth
          cors: true
    Updateproduct:
      handler: src/lambda/http/updateproduct.handler
      events:
      - http:
          method: patch
          path: products/{productId}
          authorizer: Auth
          cors: true
    Deleteproduct:
      handler: src/lambda/http/deleteproduct.handler
      events:
      - http:
          method: delete
          path: products/{productId}
          authorizer: Auth
          cors: true
    GenerateUploadUrl:
      handler: src/lambda/http/generateUploadUrl.handler
      events:
      - http:
          method: post
          path: products/{productId}/attachment
          authorizer: Auth
          cors: true
  resources:
    Resources:
      productDynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          KeySchema:
          - AttributeName: productId
            KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
          - IndexName: "${self:provider.environment.INDEX_NAME}"
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          TableName: "${self:provider.environment.product_TABLE}"

      AttachmentsBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: "${self:provider.environment.productITEM_S3_BUCKET_NAME}"
          CorsConfiguration: 
            CorsRules:
            - AllowedOrigins:
              - "*"
              AllowedHeaders:
              - "*"
              AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
              MaxAge: 3000
      BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: MyPolicy
            Version: '2012-10-17'
            Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.productITEM_S3_BUCKET_NAME}/*
          Bucket: !Ref AttachmentsBucket